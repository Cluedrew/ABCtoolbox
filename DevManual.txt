
Details of ABC Tool Box for development:

Defines:======================================================================
All code names (functions, classes, varaibles and so on) that are defined by
the ABCtoolbox are defined within the abc namespace and so must be accessed
with abc::NAME or by a using declaration. All terms defined by ABCtoolbox
during the pre-proccessor run begin with ABC. Usually either ABC_[filename]
used as public header guards or ABCDEF_[whatever] in other cases.

Just be glad guard is 'g'uard and not 'j'uard or we would have:
ABC_DEF_GH_IJ_: ABC DEFinition, Global Header, Interface Juard.

File Structure:===============================================================

|ABCtoolbox: Main directory, anything that doesn't go somewhere else goes here.
|
||include: The export directory, sort of a temperary measure while I work on it
||  (and discover how to do it properly). Contains the header file for each
||  tool as well as the library file.
||
||<tool>.hpp: Public header for each tool.
||
||lib<tool>.a: Static library for each tool.
|
||code: Contains all the raw code and other similar files created by hand.
||
|||<tool>: Contains the headers and source files for the tool.
|||
|||<tool>(.hpp|.cpp): The base of each tool is a header and source file with
|||  the same base name as the tool of itself.
|||
|||lib: A list of the -l flags used in linking.
|||
|||*.cpp: All other .cpp files in the directory will be linked to create the
|||  tool, wheither they implement anything usesful or not.
|
||.obj: Hidden directory, contains intermidate files used in compilation.
||   Finished objects go here.
||
|||<tool>: Directory for all intermediate object files and dependancy files.
|||
|||<tool>(.o|.d): Although it is treated the same there will always be an
|||  object and dependancy file with the same base name as the tool. Other
|||  files also exist.
||
||<tool>.o: Final linked object for each tool.

|/usr/local/include/ABC: This is an external link into the system. It is
|  placed properly for header includes, it should also be added to the search
|  path for libraries with -L.
|  It is will be used until there is enough in the ABCtoolbox that someone
|  might want to use and install it, at which point I will add a proper
|  install method.

Tools:========================================================================
A tool is a section of code that is exported. Each tool has a header files and
a library in the include directory. Both have the same base name as the tool,
but have preffixes and file types added as needed.

See tool list.

Public Headers:===============================================================

Public headers are the ones given to the user in the include directrory.
Currantly there is one public header for each tool, which has the same name as
the tool + .hpp. Although things are compiled outside of the include directory
(to keep the mess down) public headers may only include via <> includes and
other public headers. Only the compiled version of the code is moved to the
include directory so other files may use "" includes.

Internal Headers:=============================================================

Internal headers are used to implement parts of the code that are not given
to the user.

Compilation Flow:=============================================================

Sorce files from code/<tool>/<file>.cpp are complied into an object file
.obj/<tool>/<file>.o. These are then linked with any libraries listed in the
lib file in the tool's directory code/<tool>/lib (if one exists) to create a
final object .obj/<tool>.o. This is then used to create the library file for
the tool, include/<tool>.a.

The public header is copied from the code directory to the include directory.
Hence the code/<tool>/<tool>.hpp file is copied to include/<tool>.hpp.

Labels:=======================================================================
USER: Avalible to the end user.
INNER: Finished, but only for internal use.
TOBE: Planned, does not exist yet.
WIP: Unfinished/unstable.

Tool List:====================================================================

hello-world: Prints out a simple hello world message for testing.

WIP:
set: The STL set I find to be a little lacking, so I thought I might try and
  fix it or add onto it.
TOBE: Add some optiomiations (hints might do something) and maybe expand it
  to work with all sets, not just simple types.

TOBE:
terminal: A wrapper for ncurses that provides a set of elements (buttons,
  menus, grids) that can be created in the consol.

TOBE:
tio: Basic input/output streams that work with terminal. Includes special
  streams for fields (buttons, lists).

TOBE:
ffscanner: Read and write formated files. Not so sure about this one now.

TOBE:
base tools: used by other tools? Like structure collections.
