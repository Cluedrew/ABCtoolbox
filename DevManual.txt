
Details of ABC Tool Box for development:

Labels:=======================================================================
USER: Avalible to the end user.
INNER: Finished, but only for internal use.
TOBE: Planned, does not exist yet.
WIP: Unfinished/unstable.

Defines:======================================================================
All code names (functions, classes, varaibles and so on) that are defined by
the ABCtoolbox are defined within the abc namespace and so must be accessed
with abc::NAME or by a using declaration. All terms defined by ABCtoolbox
during the pre-proccessor run begin with ABC. Usually either ABC_[filename]
used as public header guards or ABCDEF_[whatever] in other cases.

Just be glad guard is 'g'uard and not 'j'uard or we would have:
ABC_DEF_GH_IJ_: ABC DEFinition, Global Header, Interface Juard.

File Structure:===============================================================

ABCtoolbox: Main directory, anything that doesn't go somewhere else goes here.
|
|include: The export directory, sort of a temperary measure while I work on it
|| (and discover how to do it properly). Contains the header file for each
|| tool as well as the library file.
|
|code: Contains all of the code files that the tools are complied from.
||
||<tool>: Sometime code is further grouped, usually by the tool it is for.
|| *** I think I'm going to have use this every time or not at all.
|
|headers: ??? Raw copies of the header files.
|
|.tmp: Hidden directory, contains intermidate files used in compilation.
||   Finished objects go here.
||
||<tool>:
|
|private: The "private members" of the tool box. In other words the
|| implementation of system.

Tools:========================================================================
A tool is a section of code that is exported. Each tool has a header files and
a library in the include directory. Both have the same base name as the tool,
but have preffixes and file types added as needed.

See tool list.

Public Headers:===============================================================

Public headers are the ones given to the user in the include directrory.
Currantly there is one public header for each tool, which has the same name as
the tool +.hpp. Although things are compiled outside of the include directory
(to keep the mess down) public headers may only include via <> includes and
other public headers. Only the compiled version of the code is moved to the
include directory so other files may use "" includes.

Internal Headers:=============================================================

Internal headers are used to implement parts of the code that are not given
to the user.

Compilation Flow:=============================================================

Sorce files (.cpp) are complied into an object file for the tool.
 * Currantly this is all that happens. As all in one step with no variation,
   but I'm working on that.
***???
The code files from code/<tool> (or just code?) are compiled and the results
are stored in .obj/<tool> along with dependancy files. Then all the objects in
.obj/<tool> are linked to .obj/<tool>.o. Finally that file is turned into a
library.
***???

The public header is copied from the code directory to the include directory.

A library file is generated from the final object file for each tool and
placed in the include directory.

Tool List:====================================================================

hello-world: Prints out a simple hello world message for testing.
